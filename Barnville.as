package{	import EscapeFarmville.mp3;		import com.evili.Shell.*;	import com.evili.images.ImageScroller;	import com.evili.utils.ArrayCloner;	import com.evili.utils.Dock;	import com.evili.utils.Map;	import com.evili.utils.Rndm;	import com.evili.utils.SoundPlayer;	import com.evili.worldBuilder.controllers.CharacterBuilder;	import com.evili.worldBuilder.controllers.MessageController;	import com.evili.worldBuilder.controllers.StoreController;	import com.evili.worldBuilder.controllers.TileManager;	import com.evili.worldBuilder.events.ClickedTileEvent;	import com.evili.worldBuilder.events.DataEvent;	import com.evili.worldBuilder.events.DebugEvent;	import com.evili.worldBuilder.events.UserEvent;	import com.evili.worldBuilder.events.UserLeavesRoomEvent;	import com.evili.worldBuilder.events.UserMovedEvent;	import com.evili.worldBuilder.model.CharacterVO;	import com.evili.worldBuilder.model.GridVO;	import com.evili.worldBuilder.model.ItemVO;	import com.evili.worldBuilder.model.ItemXMLData;	import com.evili.worldBuilder.model.Messages;	import com.evili.worldBuilder.model.ModelLocator;	import com.evili.worldBuilder.model.TileVO;	import com.evili.worldBuilder.model.TileXMLData;	import com.evili.worldBuilder.model.User;	import com.evili.worldBuilder.modules.*;	import com.evili.worldBuilder.parsers.ItemParser;	import com.evili.worldBuilder.parsers.MapParser;	import com.friendsofed.isometric.DrawnIsoTile;	import com.friendsofed.isometric.GraphicTile;	import com.friendsofed.isometric.IsoObject;	import com.friendsofed.isometric.IsoWorld;	import com.friendsofed.isometric.Point3D;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.net.SharedObject;	import flash.utils.*;		[SWF(backgroundColor=0x000000)]	public class Barnville extends Sprite	{		/** controls adding avatars, tiles, avatar movemement, etc. Manages the world */		private var _isoWorld:IsoWorld;		/** container for the isoWorld */		private var _isoWorldContainer:Sprite;		/**used to keep track of which user's avatar we're trying to place in the world */		private var _currentUser:User;		/**retrieved from SFServerClient - the ID of the "main" character/user*/		public var _myUserId:int;		/**retrieved from SFServerClient - the name of the "main" character/user*/		public var _myUserName:String		/**set by color chooser - the "color" of the avatar */		public var _myUserColor:uint;		/** contains all the (temporary) UI widgets, comboBoxes, traces, etc 		 *  should be easily replaceable with a different "skin"*/		///private var _shell:Shell;				/** a view for seeing traces/debug messages */		private var _debugModule:DebugModule;		/** handles passing of private/public messages from one client to another */		private var _messageController:MessageController;		/** before we attempt to build the grid/room for a particular world, we need to make sure		 *  it's xml file has been loaded and parsed */		private var _worldReady:Boolean = false;		/** factory for creating avatars */		private var _characterBuilder:CharacterBuilder;		/** contains all messages*/		private var _messages:Messages		/** array of random messages to display when user clicks/walks on a walkable tile */		private var _inGameMessagesArray:Array;		/** array of messages when user clicks on a 'content' tile (a non-walkable tile)*/		private var _inGameContentArray:Array;		/** array of generic spam messages*/		private var _spamArray:Array;		/** array of fake friends for messages */		private var _fakeFriendsArray;		/** array of illustrated jokes*/		private var _illustratedJokeMessageArray:Array;		/** controls the creation and functionality of the various dialogs used to place and buy items on the world*/		private var _storeController:StoreController;		private var _illustratedJokeMcsArray:Array;				private var theStage:Stage;				private var _welcomeScreen:MovieClip;		private var _helpButton:MovieClip;		//the help button used when the movie is playing		private var _helpButton2:MovieClip;		private var _startButton:MovieClip;		private var _helpScreen:MovieClip;				[SWF(backgroundColor=0x000000)]		public function Barnville(stageRef:Stage=null)		{			init(stageRef);		}		/** adds the debug screen, if in debug mode, and the login module */		private function init(stageRef:Stage=null):void{			if (stageRef == null){				stage.align = StageAlign.TOP_LEFT;				stage.scaleMode = StageScaleMode.NO_SCALE;				ModelLocator.getInstance().stageWidth = stage.stageWidth;				ModelLocator.getInstance().stageHeight = stage.stageHeight;			}else{				stageRef.align = StageAlign.TOP_LEFT;				stageRef.scaleMode = StageScaleMode.NO_SCALE;				ModelLocator.getInstance().stageWidth = stageRef.stageWidth;				ModelLocator.getInstance().stageHeight = stageRef.stageHeight;							}						///this.addEventListener(DataEvent.LOGGED_IN, onLogin);			///dispatchEvent(new DataEvent(DataEvent.LOGGED_IN, "Mr. Eko"));						///var bg:Background;			var agTeaser:MovieClip = new AGteaser();			agTeaser.x = 125;			agTeaser.y = 65;			addChild(agTeaser);			agTeaser.addEventListener(Event.COMPLETE, teaserDone);					}		private function teaserDone(e:Event):void{			var agTeaser:MovieClip = e.target as MovieClip;			agTeaser.removeEventListener(Event.COMPLETE, teaserDone);			removeChild(agTeaser);						_welcomeScreen = new WelcomeScreen();			addChild(_welcomeScreen);			_startButton = new StartButton();			_welcomeScreen.addChild(_startButton);			_startButton.addEventListener(MouseEvent.CLICK, onStartButtonClicked);			_startButton.x = -11;			_startButton.y = 534;			_startButton.buttonMode = true;						_helpButton = new HelpButton();			_welcomeScreen.addChild(_helpButton);			_helpButton.x = 586;			_helpButton.y = 534;			_helpButton.buttonMode = true;			_helpButton.addEventListener(MouseEvent.CLICK, onHelpButtonClicked);					if (ModelLocator.getInstance()._playBGMusic == true){				startSoundtrack();			}		}		private function onStartButtonClicked(e:Event):void{			_startButton.removeEventListener(MouseEvent.CLICK, onStartButtonClicked);			_welcomeScreen.removeChild(_startButton);			_startButton = null;			removeChild(_welcomeScreen);			this.addEventListener(DataEvent.LOGGED_IN, onLogin);			dispatchEvent(new DataEvent(DataEvent.LOGGED_IN, "Mr. Eko"));						var bg:Background;					}		private function onHelpScreenClicked(e:Event):void{			_helpScreen.removeEventListener(MouseEvent.CLICK, onStartButtonClicked);			removeChild(_helpScreen);			this.addEventListener(DataEvent.LOGGED_IN, onLogin);			dispatchEvent(new DataEvent(DataEvent.LOGGED_IN, "Mr. Eko"));						var bg:Background;					}		private function onHelpButtonClicked(e:Event):void{			_helpButton.removeEventListener(MouseEvent.CLICK, onHelpButtonClicked);			removeChild(_welcomeScreen);			_helpScreen = new HelpScreen();			_helpScreen.buttonMode = true;			addChild(_helpScreen);			_helpScreen.addEventListener(MouseEvent.CLICK, onHelpScreenClicked);		}		/** called from colorPicker in the loginModule */		private function onSetColor(e:DataEvent):void {			ModelLocator.getInstance()._myUserColor = e.data as uint;			_myUserColor = e.data as uint;		}		/** event handler for the login Button in the loginModule */ 		public function onLogin(e:DataEvent):void{			ModelLocator.getInstance()._currentRoomUserSettingsMap = new Map();			_myUserName = e.data as String;			ModelLocator.getInstance()._myUserName = e.data as String;			ModelLocator.getInstance()._destroyMode = false;			onNoServerStartUp();		}		/** called on startup when we are NOT using SmartFox server/multiplayer		 *  takes the place of the onConnect, onReceivedListOfRooms and onJoinedRoom handlers*/		private function onNoServerStartUp():void{			_myUserId = 1;			ModelLocator.getInstance()._mainCharacterId = _myUserId;						var roomList:Array = new Array("Default");			_worldReady = false;			trace("Main:::onJoinedRoom::currentUser: " + _myUserName);			//store the currentUserSettings in the list of all currentUserSettings, by room			var currentRoomId:int = 1;						if(ModelLocator.getInstance()._currentRoomUserSettingsMap.getValue(currentRoomId.toString()) == null){				var currentUserSettingsMap:Map = new Map();				ModelLocator.getInstance()._currentRoomUserSettingsMap.put(currentRoomId.toString(), currentUserSettingsMap);			}			_currentUser = new User(_myUserId, _myUserName);			createWorld();		}				/** start the isoWorld creation process - called every time we switch rooms		 *  currently rather "magical" 		 *  NOTE: when adding "magic" rooms - call makeWorld here		 *  create a magic grid in grid.makeMagicGrid		 *  create an if statement in findRandomWalkableTile in grid*/		private function createWorld():void{			trace("Main:::createWorld()");			var currentRoomName:String = "SingleRoom";			//uses and xml file to make rooms			if (ModelLocator.getInstance()._useSharedObject == true){								var mySo:SharedObject = SharedObject.getLocal("barnworld");				ModelLocator.getInstance()._mySO = mySo;				///var gridVO:GridVO = new GridVO(mySo.data.savedValue);				///var gridVO:GridVO = new GridVO(mySo.data.savedValue.gridVO);				var gridVO:GridVO = new GridVO(mySo.data.gridVO);				var floorData:Array = gridVO._floorData;				if (floorData == null){					makeWorld();				}else{				for (var i:uint=0; i<floorData.length; i++){					var itemObject:Object = floorData[i];					//for (var j:uint=0; j < itemArray.length; j++){					floorData[i] = new TileVO(itemObject);					//}				}				ModelLocator.getInstance()._gridVO = gridVO;				///var itemsArray:Array = mySo.data.savedValue.itemsArray as Array;				var itemsArray:Array = mySo.data.itemsArray as Array;				//NOTE: when import itemsArray, the elements are no longer recognized as ItemVO instances, just plain objects				//so we need to recreate them here				/*for (var i:uint=0; i<itemsArray.length; i++){					var currentArray:Array = itemsArray[i];					for (var j:uint=0; j < currentArray.length; j++){						currentArray[j] = new ItemVO(currentArray[j]);					}				}				ModelLocator.getInstance()._itemsArray = itemsArray;*/				//reset score				var farmbucks:Number = mySo.data.farmbucks;				ModelLocator.getInstance()._farmBucks = farmbucks;				////makeWorld(gridVO);				var itemData:XML = ItemXMLData.getData();				var itemParser:ItemParser = new ItemParser();				itemParser.addEventListener("itemDataComplete", onSavedItemsReady);				itemParser.useLocalXMLData(itemData);				}			}else if (ModelLocator.getInstance()._useXMLMap == true){								///parseMap("20x20_room.xml"); 				///parseMap("20x20_roomNoElevation.xml"); 				//parseMap("20x20_furniture.xml"); 				//parseMap("Tiles.xml"); 				///parseMap("BlankTiles.xml");				//OR use embedded xml data for blank tiles:				var tileData:XML = TileXMLData.getData();				mapParser = new MapParser();				mapParser.addEventListener("dataComplete", onMapReady);				mapParser.useLocalXMLData(tileData);											}else{				//uses hard-coded, internal data to make rooms				makeWorld();			}					}				/** when the SO data is finished loading, get the item data that doesn't change from game to game*/		private function onSavedItemsReady(dataEvent:DataEvent):void{			trace("Main:::onSavedItemsReady::dataEvent.data: " + dataEvent.data);			dataEvent.target.removeEventListener("itemDataComplete", onSavedItemsReady);			var itemsArray:Array = dataEvent.data as Array;			ModelLocator.getInstance()._itemsArray = itemsArray;						makeWorld(ModelLocator.getInstance()._gridVO);		}		private var mapParser;		/** retrieve xml data for the currently-selected room */		private function parseMap(mapURL:String):void{			trace("Main:::parseMap()");			mapParser = new MapParser();			mapParser.loadMapXML(mapURL);			mapParser.addEventListener("dataComplete", onMapReady);		}		/** when the map data has completed loading, use it to make a new isoWorld/grid */		private function onMapReady(dataEvent:DataEvent):void{			mapParser.removeEventListener("dataComplete", onMapReady);			trace("Main:::onMapReady::dataEvent.data: " + dataEvent.data);			///var mapInfo:Object = dataEvent.data;			var gridVO:GridVO = dataEvent.data as GridVO;			ModelLocator.getInstance()._gridVO = gridVO;			///makeWorld(mapInfo);			///makeWorld(gridVO);			mapParser = null;			///parseItems("items.xml");			//OR, USE INTERNAL XML FILE			var itemData:XML = ItemXMLData.getData();			var itemParser:ItemParser = new ItemParser();			itemParser.addEventListener("itemDataComplete", onItemsReady);			itemParser.useLocalXMLData(itemData);					}		/** retrieve xml data for the currently-selected room */		private function parseItems(itemsURL:String):void{			trace("Main:::parseItems()");			var itemParser:ItemParser = new ItemParser();			itemParser.loadMapXML(itemsURL);			itemParser.addEventListener("itemDataComplete", onItemsReady);		}		/** when the map data has completed loading, use it to make a new isoWorld/grid */		private function onItemsReady(dataEvent:DataEvent):void{			trace("Main:::onItemsReady::dataEvent.data: " + dataEvent.data);			dataEvent.target.removeEventListener("itemDataComplete", onItemsReady);			///var mapInfo:Object = dataEvent.data;			///var gridVO:GridVO = dataEvent.data as GridVO;			///ModelLocator.getInstance()._gridVO = gridVO;			///makeWorld(mapInfo);			var itemsArray:Array = dataEvent.data as Array;			ModelLocator.getInstance()._itemsArray = itemsArray;			//save the imported data into the shared object IMMEDIATELY			var mySo:SharedObject = SharedObject.getLocal("barnworld");			if (mySo != null){				mySo.clear();			}			///var savedObject:Object = new Object();			///savedObject.gridVO = ModelLocator.getInstance()._gridVO;			///savedObject.itemsArray =  ModelLocator.getInstance()._itemsArray;			///mySo.data.savedValue = _gridVO;			///mySo.data.savedValue = savedObject;			mySo.data.gridVO = ModelLocator.getInstance()._gridVO;			mySo.data.itemsArray = ModelLocator.getInstance()._itemsArray;			mySo.data.farmbucks = ModelLocator.getInstance()._farmBucks;			mySo.flush();			ModelLocator.getInstance()._mySO = mySo;												makeWorld(ModelLocator.getInstance()._gridVO);		}		/** create a new isoWorld for the current room, and a grid to go along with it */		///private function makeWorld(mapInfo:Object=null):void{		private function makeWorld(gridVO:GridVO=null):void{			var worldContainerWidth:int = ModelLocator.getInstance()._worldContainerWidth;			var worldContainerHeight:int = ModelLocator.getInstance()._worldContainerHeight;			var bg:Background = new Background();			addChild(bg);			if (_isoWorldContainer == null){				_isoWorldContainer = new Sprite();				/*_isoWorldContainer.graphics.lineStyle(3, 0xeeeeee, 1);				_isoWorldContainer.graphics.beginFill(0x006633, 1);				_isoWorldContainer.graphics.drawRoundRect(0, 0, worldContainerWidth, worldContainerHeight, 15, 15);				_isoWorldContainer.graphics.endFill();*/			}			if (_isoWorld != null){				_isoWorldContainer.removeChild(_isoWorld);			}			_isoWorld = new IsoWorld();									_isoWorld.addEventListener("worldReady", onWorldReady);			///if (mapInfo != null){				///_isoWorld.createWorld( mapInfo );			if (gridVO != null){				_isoWorld.createWorld( gridVO );			}else{				_isoWorld.createWorld(null);			}			_isoWorld.x = _isoWorldContainer.width/2;			_isoWorld.y = 50;			_isoWorldContainer.addChild(_isoWorld);			////addChild(_isoWorldContainer);			bg.addChild(_isoWorldContainer);			_isoWorldContainer.x = _isoWorldContainer.width/2;			_isoWorldContainer.y = 50;			_isoWorld.addEventListener(DataEvent.PURCHASE_ITEM, updateStore);						var agLogo:MovieClip = new AddictingGames();			bg.addChild(agLogo);			agLogo.x = 265;			agLogo.y = 6;									_isoWorld.addEventListener(ClickedTileEvent.CLICKED_TILE, onClickedTile);			//NOTE:*** THESE ARE USED WHEN WE'RE USING A MULTI-USER SERVER!!!			///_isoWorld.addEventListener(UserMovedEvent.MOVED, onUserMovedEvent);			///_isoWorld.addEventListener(DebugEvent.DEBUG_MSG, onDebugMsg);			///_isoWorld.addEventListener(DataEvent.UPDATE_USER_VARS, onUpdateUserVars);			///_isoWorld._grid.addEventListener(DebugEvent.DEBUG_MSG, onDebugMsg);						///_messageController.createTextBubbleController(_isoWorld, _isoWorld._world);									_storeController = new StoreController(this);			updateStore();			_isoWorld.addEventListener("selectNone", selectNone);			_isoWorld.addEventListener("RemovePopup", doRemovePopup);			_isoWorld.addEventListener(DataEvent.STATUS_UPDATE, doStatusUpdate);			/*if (ModelLocator.getInstance()._playBGMusic == true){				startSoundtrack();			}*/			addHelpButton2();		}		private function addHelpButton2():void{			_helpButton2 = new HelpButton();			addChild(_helpButton2);			_helpButton2.x = 586;			_helpButton2.y = 534;			_helpButton2.buttonMode = true;			_helpButton2.addEventListener(MouseEvent.CLICK, onHelpButton2Clicked);		}		private function onHelpButton2Clicked(e:Event):void{			_helpButton2.removeEventListener(MouseEvent.CLICK, onHelpButtonClicked);			//removeChild(_welcomeScreen);			_helpScreen = new HelpScreen();			_helpScreen.buttonMode = true;			addChild(_helpScreen);			_helpScreen.addEventListener(MouseEvent.CLICK, onHelpScreen2Clicked);		}		private function onHelpScreen2Clicked(e:Event):void{			_helpScreen.removeEventListener(MouseEvent.CLICK, onHelpScreen2Clicked);			removeChild(_helpScreen);		}		private function startSoundtrack():void{			var bgSound:Sound = new EscapeFarmville.mp3();			var soundPlayer:SoundPlayer = new SoundPlayer();			soundPlayer.startSound(bgSound, 1, 99);		}		private function selectNone(e:Event):void{			if (_storeController != null){				_storeController.onSelectNone();			}		}		private function doRemovePopup(e:Event):void{			trace("Barnville: remove popup called");			//NOTE:$$$ do this for other message controllers too			if (_messageController != null){				if (_messageController.tbController != null){					_messageController.tbController.clearAllTextBubbles();				}			}		}		private function updateStore(e:DataEvent=null):void{			if (_storeController != null){				_storeController.updateScoreBoard();			}		}				/** when the isoWorld is completely drawn, all tiles added, we call this */		private function onWorldReady(e:Event):void{			trace("Main:::onWorldReady()");			_worldReady = true;			//now we can safely add our avatar			if (ModelLocator.getInstance()._showAvatar == true){				addAvatar();			}			//should be called ONLY AFTER AVATAR IS ADDED!!!			if (ModelLocator.getInstance()._showMessages == true){				_messageController = new MessageController();				initMessages();				var intervalId:uint = setInterval(showSpam, ModelLocator.getInstance()._spamFrequency);				//var rattlesnakeId:uint = setInterval(showRattlesnake, 5000);				//var outhouseId:uint = setInterval(showBathroom, 3000);							}			if (ModelLocator.getInstance()._addRattlesnake == true){				var rattlesnakeId:uint = setInterval(showRattlesnake, 20000);			}			///var scoreTimer:uint = ModelLocator.getInstance()._scoreTimer;			///var playTimeId:uint = setInterval(updateScore,scoreTimer, 1);		}		private function updateScore():void{			trace(arguments[0] + " " + arguments[1]);			ModelLocator.getInstance()._farmBucks +=arguments[0];			var mySo:SharedObject = ModelLocator.getInstance()._mySO;			mySo.data.farmbucks = ModelLocator.getInstance()._farmBucks;			updateStore();		}		/** adds the user's avatar to the world*/		private function addAvatar():void{						_characterBuilder = new CharacterBuilder(_currentUser, _isoWorld, _myUserId, _myUserName, _myUserColor);			_characterBuilder.addAllCharacters();		}		///////////////////////////////////////////////////////////////////		//FAUX messaging system - should be a separate class		///////////////////////////////////////////////////////////////////		private function showRattlesnake():void{			trace("add rattlesnake to random tile");			trace("show rattlesnake message");			if (ModelLocator.getInstance()._isRattlesnake == false){				_isoWorld.addRattlesnake();			}					}		private function showBathroom():void{			trace("you need to use the bathroom!")			if (ModelLocator.getInstance()._isOuthouse == true){				trace("click on the outhouse - you gotta go!")			}else{				trace("oh noes - you gotta go - first you better add an outhouse!");			}		}		private function showSpamMessage():void{			if (_inGameMessagesArray.length == 0){				startInGameMessages();			}		}		/** called whenever we click on any tile - using it to generate fake messages*/		private function onClickedTile(e:ClickedTileEvent):void{			if (ModelLocator.getInstance()._showMessages == true){				var tile:IsoObject = e.tile;				var tileID:int = tile._node._id;				var floorData:Array = _isoWorld._gridVO._floorData;				var tileVO:TileVO = floorData[tileID];				var classRef:Class = e.classRef;				if (classRef != null){					var mc:MovieClip = new classRef() as MovieClip;					trace("classRef:" + classRef);					var className:String = flash.utils.getQualifiedClassName( mc );				}								//var currentItemVO:ItemVO = TileManager.getCurrentItemVO(className);				/*if (tile is DrawnIsoTile){					showInGameMessage();				}else if (tile is GraphicTile){					showInContentMessage(e);				}*/				if (ModelLocator.getInstance()._selectedItemVO == null){					if (tileVO._occupierID == 0){						if (className == "TilledEarth" || className == "EarthPatch"){							showInGameMessage(e);						}					}				}else{					//show a message when we add something to the grid					showInContentMessage(e);				}			}		}		//NOTE: all messages are now the same: _messageController.onSentGenericMessage(newUserEvent);		private function showSpam():void{			if (_spamArray.length == 0){				startSpamMessages();			}			var currentMessage:String = String(Rndm.getRandomObj(_spamArray,true));			var currentFakeFriend:String = String(Rndm.getRandomObj(_fakeFriendsArray,true));						var pattern:RegExp = /\(insert name\)/gi;			var newMessage:String = currentMessage.replace(pattern, currentFakeFriend);			var newUserEvent:UserEvent = new UserEvent(UserEvent.SENT_PUBLIC_MESSAGE, _currentUser, newMessage);			if (_messageController.tbController == null){				_messageController.createTextBubbleController(_isoWorld, _isoWorldContainer)			}			_messageController.onSentSpamMessage(newUserEvent);			///_messageController.onSentGenericMessage(newUserEvent);		}		/** messages when you click on certain items, add items for the first time - actual info */		private function doStatusUpdate(e:DataEvent):void{			var statusMessage:String = e.data as String;			///var currentMessage:String = String(Rndm.getRandomObj(_inGameMessagesArray,true));			///var newUserEvent:UserEvent = new UserEvent(UserEvent.SENT_PUBLIC_MESSAGE, _currentUser, statusMessage + " " + currentMessage);			var newUserEvent:UserEvent = new UserEvent(UserEvent.SENT_PUBLIC_MESSAGE, _currentUser, statusMessage);			if (_messageController.tbController == null){				_messageController.createTextBubbleController(_isoWorld, _isoWorldContainer);			}			_messageController.onSentStatusMessage(newUserEvent);		}		/** called when we click on a walkable tile */				private var gameMessageNum:int = 0;		private var contentMessageNum:int = 0;				private function showInGameMessage(e:ClickedTileEvent):void{			if (_inGameMessagesArray.length == 0){				startInGameMessages();			}			if (_joke != null){				removeChild(_joke);			}			//only send a message every three clicks			if (gameMessageNum % 3 == 0 && gameMessageNum !=0){				var currentMessage:String = String(Rndm.getRandomObj(_inGameMessagesArray,true));								var useIllustratedJoke:Number = _illustratedJokeMessageArray.indexOf(currentMessage);				//use below for testing				//var useIllustratedJoke:Number= 1;				trace("showInGameMessage::useIllustratedJoke: " + useIllustratedJoke);				if (useIllustratedJoke == -1){										var newUserEvent:UserEvent = new UserEvent(UserEvent.SENT_PUBLIC_MESSAGE, _currentUser, currentMessage);					if (_messageController.tbController == null){						_messageController.createTextBubbleController(_isoWorld, _isoWorldContainer);					}					//_messageController.onSentPublicMessage(newUserEvent);					_messageController.onSentGenericMessage(newUserEvent);				}else{					var jokeClassName:String = _illustratedJokeMcsArray[useIllustratedJoke];					var jokeClass:Class = getDefinitionByName(jokeClassName) as Class;					_joke = new jokeClass() as DisplayObject;					addChild(_joke);										_joke.scaleX = 0.7;					_joke.scaleY = 0.7;					_joke.x = ModelLocator.getInstance()._worldContainerWidth/2 - _joke.width/2;					_joke.y = ModelLocator.getInstance()._worldContainerHeight/2 - _joke.height/2;										_joke.addEventListener(MouseEvent.CLICK, killJoke);				}											}			gameMessageNum++;		}		private var _joke:DisplayObject;		private function killJoke(e:MouseEvent):void{			_joke.removeEventListener(MouseEvent.CLICK, killJoke);			removeChild(_joke);			_joke = null;		}		/** called when we add an item from the store*/		private function showInContentMessage(e:ClickedTileEvent):void{			///var bumSteer:BumSteer = new BumSteer();			////this.addChild(bumSteer);			if (_inGameContentArray.length == 0){				startInContentMessages();			}			if (_joke != null){				removeChild(_joke);			}			if (contentMessageNum % 3 == 0 && contentMessageNum !=0){				var currentMessage:String = String(Rndm.getRandomObj(_inGameContentArray,true));				var useIllustratedJoke:Number = _illustratedJokeMessageArray.indexOf(currentMessage);				trace("showInContentMessage::useIllustratedJoke: " + useIllustratedJoke);				if (useIllustratedJoke == -1){					var newUserEvent:UserEvent = new UserEvent(UserEvent.SENT_PUBLIC_MESSAGE, _currentUser, currentMessage);					if (_messageController.tbController == null){						_messageController.createTextBubbleController(_isoWorld, _isoWorldContainer)					}					//_messageController.onSentPublicMessage(newUserEvent);					///_messageController.onSentContentMessage(e, currentMessage);					_messageController.onSentGenericMessage(newUserEvent);				}else{					var jokeClassName:String = _illustratedJokeMcsArray[useIllustratedJoke];					var jokeClass:Class = getDefinitionByName(jokeClassName) as Class;					_joke = new jokeClass() as DisplayObject;					addChild(_joke);					_joke.x = ModelLocator.getInstance()._worldContainerWidth/2 - _joke.width/2;					_joke.y = ModelLocator.getInstance()._worldContainerHeight/2 - _joke.height/2;					_joke.addEventListener(MouseEvent.CLICK, killJoke);				}			}			contentMessageNum++;		}		/** initialize the inGame, Content and Spam messages */		private function initMessages():void{			var inGameMessages:Messages = new Messages();			_messages = new Messages();			startInGameMessages();			startInContentMessages();			startSpamMessages();			startFakeFriends();			startIllustratedJokes();		}						/*function clone(source:Object):*		{			var myBA:ByteArray = new ByteArray();			myBA.writeObject(source);			myBA.position = 0;			return(myBA.readObject());		}*/		private function startInGameMessages():void{			_inGameMessagesArray = ArrayCloner.clone(_messages.inGameMessageArray);		} 		private function startInContentMessages():void{			_inGameContentArray = ArrayCloner.clone(_messages.inGameContentArray);		}		private function startSpamMessages():void{			_spamArray = ArrayCloner.clone(_messages.spamContentArray);		}		private function startFakeFriends():void{			_fakeFriendsArray = ArrayCloner.clone(_messages.fakeFriendsArray);		}		private function startIllustratedJokes():void{			_illustratedJokeMessageArray = ArrayCloner.clone(_messages.illustratedJokeMessageArray);			_illustratedJokeMcsArray = ArrayCloner.clone(_messages.illustratedJokeMcsArray);			//NOTE: whenever we use a string to access a classname and then create a displayobject, we need to initialized the object beforehand - stoopid but true			var w:Wombat;			var bw:BabyWorker;			var p:Picken;			var cc:CrappyCrops;			var bs:BumSteer;		}			}}