package com.evili.utils{	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.utils.Timer;	// Provides common sound functions Can be used through static interface or via instantiation.	public class SoundPlayer extends EventDispatcher {		// static interface:		// NOTE: for usage information, look at the instance methods below.		private var _soundTimer:Timer;		private var _currentVolume:Number;		private var _currentSound:Sound;		private var _currentChannel:SoundChannel;		private var _fadeIncrement:Number;		private var _maxVolume:Number;		protected static var _instance:SoundPlayer;		public static function get instance():SoundPlayer {			if (_instance==null) {				_instance = new SoundPlayer();			}			return _instance;		}		public function startSound(snd:Sound, vol:Number = 1.0, loops:Number=99, startTime:Number=0):void {			//if (_bgMusic==null) {			_currentSound=snd;			_currentVolume=vol;			var currentTransform:SoundTransform=new SoundTransform(_currentVolume);			_currentChannel=_currentSound.play(startTime,loops,currentTransform);			//}		}		public function stopSound():void {			if (_currentChannel!=null) {				_currentChannel.stop();			}		}		/** call this function to fade out the current sound*/		public function startFadeOut(delay:Number, repeat:Number, fadeIncrement:Number=0.5):void {			_fadeIncrement=fadeIncrement;			_soundTimer=new Timer(delay,repeat);			_soundTimer.start();			_soundTimer.addEventListener(TimerEvent.TIMER, fadeVolume);		}		/** call this function to fade out the current sound*/		public function startFadeIn(delay:Number, repeat:Number, maxVolume:Number = 1.0, fadeIncrement:Number=0.5):void {			_maxVolume = maxVolume;			_fadeIncrement=fadeIncrement;			_soundTimer=new Timer(delay,repeat);			_soundTimer.start();			_soundTimer.addEventListener(TimerEvent.TIMER, fadeInVolume);		}		private function fadeVolume(e:Event):void {			_currentVolume-=_fadeIncrement;			//trace("_volume: " + _volume);			setVolume(_currentVolume);			if (_currentVolume<=_fadeIncrement) {				_soundTimer.stop();				_soundTimer.removeEventListener(TimerEvent.TIMER, fadeVolume);				_currentChannel.stop();				dispatchEvent(new Event("soundFaded"));			}		}		private function fadeInVolume(e:Event):void {			_currentVolume+=_fadeIncrement;			//trace("_volume: " + _volume);			setVolume(_currentVolume);			if (_currentVolume>=_maxVolume) {				_soundTimer.stop();				_soundTimer.removeEventListener(TimerEvent.TIMER, fadeInVolume);				///_currentChannel.stop();				dispatchEvent(new Event("soundFadedIn"));			}		}		private function setVolume(volume:Number):void {			trace("setVolume: " + volume.toFixed(2));			var transform:SoundTransform=_currentChannel.soundTransform;			transform.volume=volume;			_currentChannel.soundTransform=transform;		}	}}