package com.evili.images {	import flash.display.*;	import flash.events.Event;	import flash.utils.getDefinitionByName;		public class ImageScroller extends MovieClip{		private var _displayObjectsArray:Array;		private var _mask_mc:MovieClip;				private var scroller:MovieClip = new MovieClip();		private var imageWidth:Number = 300;		private var imageHeight:Number = 46;		private var padding:Number = 4;		private var initialPosition:Number = 0;				///var scrollStyle:String = "bounce"; 		//var scrollStyle:String = "inifiniteUp"; 		private var scrollStyle:String = "horizontal"; 						private var speed:Number = -0.5;		private var scrollerMidpoint:Number = scroller.height/2;				public function ImageScroller(displayObjectsArray:Array, mask_mc:MovieClip=null){						_displayObjectsArray = displayObjectsArray;			_mask_mc = mask_mc;			///scroller.graphics.beginFill(0xFF00FF);			///scroller.graphics.drawRect( 0, 0, 300, 264);						addChild(scroller);			scroller.y = initialPosition;			scroller.x = -0.5;			//var scrollerMidpoint:Number = 134;			trace("scroller.height: " + scroller.height);			init();		}				private function init():void{			for (var i:uint = 0; i < _displayObjectsArray.length; i++) {				var thisOne:MovieClip = new MovieClip();							//outline  				var blackBox:Sprite = new Sprite();				//create a 1-pixel border around the images				blackBox.graphics.beginFill(0x000000);				//blackBox.graphics.drawRect( -1, -1, imageWidth + 2, imageHeight + 2);				blackBox.graphics.drawRect( 0, 0, imageWidth, imageHeight + 2);				thisOne.addChild(blackBox);							thisOne.y = (imageHeight + padding) * i;				//trace("thisOne.y: " + thisOne.y);				///thisOne.x = 100;				thisOne.itemNum=i;								var currentItem:String = _displayObjectsArray[i];				var classRef:Class = getDefinitionByName(currentItem) as Class;				var mc:MovieClip = new classRef() as MovieClip;												///resizeMe(_displayObjectsArray[i], imageWidth, imageHeight);				///thisOne.addChild(_displayObjectsArray[i]);								resizeMe(mc, imageWidth, imageHeight);				thisOne.addChild(mc);				//thisOne.y = 51 * (i+1);							// trace(thisOne.itemNum, thisOne.title, " added to scroller");  				//add item  				scroller.addChild(thisOne);				///scroller.addEventListener(Event.ENTER_FRAME, moveScrollerThumbsVertical);				if (scrollStyle == "bounce"){					scroller.addEventListener(Event.ENTER_FRAME, autoScroll);				}else if (scrollStyle == "inifiniteUp"){					scroller.addEventListener(Event.ENTER_FRAME, scrollUpForever);				}else if (scrollStyle == "inifiniteDown"){					scroller.addEventListener(Event.ENTER_FRAME, scrollDownForever);				}else if (scrollStyle == "horizontal"){					scroller.addEventListener(Event.ENTER_FRAME, moveScrollerThumbsHorizontal);				}				//trace("scroller.height" + scroller.height);				scroller.mask = _mask_mc;			}		}		private function moveScrollerThumbsHorizontal(e:Event):void {			if (mouseX<stage.stageWidth/2) {//left half of stage  				speed=2;			} else {//right half of stage  				speed=-2;			}			scroller.x+=speed;		}		private function autoScroll(e:Event):void {			scroller.y+=speed;			if ((scroller.y + scroller.height) < 330 || scroller.y > 60){				trace("scrolled out");				speed *= -1;			}		}		private function scrollUpForever(e:Event):void {			trace("scrollUpForever");			scroller.y+=speed;			if ((scroller.y + scroller.height) < 330 || scroller.y > initialPosition){				trace("scrolled out");								var lastClip:DisplayObject = scroller.getChildAt(scroller.numChildren-1);				var currentY:Number = lastClip.y;				trace("currentY: " + currentY);				trace("scroller.height: " + scroller.height);				var topClip:DisplayObject = scroller.removeChildAt(1);				scroller.addChildAt(topClip, scroller.numChildren);				topClip.y = currentY + imageHeight + padding;			}		}		private function scrollDownForever(e:Event):void {			//trace("scrollDownForever");			scroller.y-=speed;			//trace("scroller.y: " + scroller.y);			if (scroller.y >initialPosition){								trace("scrolled out");				trace(" original scroller.y: " + scroller.y);				scroller.y -= (imageHeight + padding);				trace("scroller.y: " + scroller.y);				for (var i:uint = 0; i < scroller.numChildren; i++){					trace("scroller.height: " + scroller.height);					var currentClip:DisplayObject = scroller.getChildAt(i);					currentClip.y +=  (imageHeight + padding);				}								trace("scroller.height: " + scroller.height);				var topClip:DisplayObject = scroller.getChildAt(0);				var currentY:Number = topClip.y;				trace("currentY: " + currentY);				var lastClip:DisplayObject = scroller.removeChildAt(scroller.numChildren-1);				scroller.addChildAt(lastClip,0);				lastClip.y = currentY - imageHeight - padding;							}		}		private function moveScrollerThumbsVertical(e:Event):void {			if (mouseX>scroller.x&&mouseX<scroller.x+scroller.width) {//horizontally over scroller  				/*if (mouseY<130) {//left half of stage  					speed=5;				} else {//right half of stage  					speed=-5;				}*/				 if (mouseY < scrollerMidpoint && mouseY > 51) {//left of stage explicitly  					 speed = - (mouseY - scrollerMidpoint) / 8;				}  else if (mouseY > scrollerMidpoint && mouseY < (scroller.height + 51)) {//right of stage explicitly  					 speed = -(mouseY - scrollerMidpoint) / 8;  				 }  				scroller.y+=speed;								 //scroller limits  				 if (scroller.y < -scroller.height + 130 - 20) { //if scroller too far up  					 scroller.y = -scroller.height + 130 - 20;  				 } else if (scroller.y > 20) { //if scroller to far right  					 scroller.y = 20;  				 }  			}		}		private function resizeMe(mc:DisplayObject, maxW:Number, maxH:Number=0, constrainProportions:Boolean=true, centerHor:Boolean=true, centerVert:Boolean=true):void {			maxH=maxH==0?maxW:maxH;			mc.width=maxW;			mc.height=maxH;			if (constrainProportions) {				mc.scaleX<mc.scaleY?mc.scaleY=mc.scaleX:mc.scaleX=mc.scaleY;			}			if (centerHor) {				mc.x = (maxW - mc.width) / 2;			}			if (centerVert) {				mc.y = (maxH - mc.height) / 2;			}		}	}}