package com.evili.worldBuilder.controllers{	import com.evili.utils.Dock;	import com.evili.worldBuilder.model.ItemVO;	import com.evili.worldBuilder.model.ModelLocator;		//import fl.controls.Button;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Mouse;	import flash.utils.*;		public class StoreController extends EventDispatcher	{		private var _container:Sprite;		private var _animalDock:Dock;		private var _tileDock:Dock;		private var _buildingDock:Dock;		private var _currentDock:Dock;		private var _cursorMc:MovieClip;				private var _scoreBoard:Sprite;		private var _moneyText:TextField;				private var _vehicleBoard:Sprite;				private var _selectedVehicle:MovieClip;				private var _farmbucksCounter:FarmbucksCounter;				private var _moneyFormat:TextFormat;				public function StoreController(container:Sprite)		{			_container = container;			init();		}		private  function init():void{						///var storeButton:Button = new Button();			var storeButton:AnimalsButton = new AnimalsButton();			_container.addChild(storeButton);			storeButton.label = "animals";						///storeButton.addEventListener(MouseEvent.CLICK, openStore);			storeButton.addEventListener(MouseEvent.CLICK, openAnimalDock);			storeButton.y = 10;						///var tileStoreButton:Button = new Button();			var tileStoreButton:CropsButton = new CropsButton();			_container.addChild(tileStoreButton);			tileStoreButton.label = "crops";			///storeButton.addEventListener(MouseEvent.CLICK, openStore);			tileStoreButton.addEventListener(MouseEvent.CLICK, openTileDock);			tileStoreButton.y = 50;						///var buildingStoreButton:Button = new Button();			var buildingStoreButton:BuildingButton = new BuildingButton();			_container.addChild(buildingStoreButton);			buildingStoreButton.label = "buildings";			buildingStoreButton.addEventListener(MouseEvent.CLICK, openBuildingDock);			buildingStoreButton.y = 90;						/*var deselectButton:Button = new Button();			_container.addChild(deselectButton);			deselectButton.label = "select none";			deselectButton.addEventListener(MouseEvent.CLICK, onSelectNone);			deselectButton.y = 90;*/						addScoreBoard();			///addVehicleDock();								}		private function addScoreBoard():void{						/*_scoreBoard = new Sprite();			_scoreBoard.graphics.lineStyle(3, 0xeeeeee, 1);			_scoreBoard.graphics.beginFill(0xcccccc, 1);			_scoreBoard.graphics.drawRoundRect(0, 0, 150, 30, 15, 15);			_scoreBoard.graphics.endFill();			_container.addChild(_scoreBoard);			_scoreBoard.x=650;*/									_scoreBoard = new FarmbucksCounter();			_container.addChild(_scoreBoard);			_scoreBoard.x=650;						_moneyText = new TextField();			_moneyText.embedFonts = true;			_moneyText.mouseEnabled = false;			var currentMoney:Number = ModelLocator.getInstance()._farmBucks;;			_moneyText.text = "$" + currentMoney;						_moneyFormat = new TextFormat();			var dualityFont:DualityFont = new DualityFont();			_moneyFormat.font = dualityFont.fontName;			_moneyFormat.size = 14;			_moneyFormat.color = 0x000000;			_moneyText.setTextFormat(_moneyFormat);			_container.addChild(_moneyText);									_moneyText.x = 50;			_moneyText.y = 10;						myText = new TextField();			myText.text = "$" + currentMoney;			myText.setTextFormat(_moneyFormat);			_scoreBoard.addChild(myText);			myText.x = 50;			myText.y = 10;		}		private var myText:TextField;		public function updateScoreBoard():void{			var currentMoney:Number = ModelLocator.getInstance()._farmBucks;;			myText.text = "$" + currentMoney;			myText.setTextFormat(_moneyFormat);		}		private function openAnimalDock(e:Event):void{						onSelectNone();			killDock();			var itemList:Array = new Array();;			var itemsArray:Array = ModelLocator.getInstance()._itemsArray;			var animalsArray:Array = itemsArray[0];			for (var i:uint=0; i<animalsArray.length; i++){				var currentItemVO:ItemVO = animalsArray[i] as ItemVO;				var currentName:String = currentItemVO._itemName;				if (currentItemVO._forSale == true){					var newItemObject = new Object();					newItemObject.name = currentName;					newItemObject.price = currentItemVO._price;					///itemList.push(currentName);					itemList.push(newItemObject);				}			}			//NOTE$$% instead of adding a list of just names, use original array, with prices too...			///_animalDock = new Dock(_container, itemList);			_animalDock = new Dock(_container, itemList);			_animalDock.addEventListener(Dock.SELECT_ITEM, handleSelectItem);			_container.addChild(_animalDock);			_animalDock.y -=10;			_currentDock = _animalDock;		}		private function openTileDock(e:Event):void{			onSelectNone()			killDock()			var storeType:String = e.currentTarget.label;			var itemList:Array = new Array();;			var itemsArray:Array = ModelLocator.getInstance()._itemsArray;			var tilesArray:Array = itemsArray[1];			for (var i:uint=0; i<tilesArray.length; i++){				var currentItemVO:ItemVO = tilesArray[i] as ItemVO;				var currentName:String = currentItemVO._itemName;				if (currentItemVO._forSale == true){					var newItemObject = new Object();					newItemObject.name = currentName;					newItemObject.price = currentItemVO._price;					///itemList.push(currentName);					itemList.push(newItemObject);				}			}			///itemList = new Array("EarthPatch","WheatPatch",  "CornPatch", "GrassPatch", "Haystack");			_tileDock = new Dock(_container, itemList);			_tileDock.addEventListener(Dock.SELECT_ITEM, handleSelectItem);			_container.addChild(_tileDock);			_tileDock.y -=10;			_currentDock = _tileDock;		}		private function openBuildingDock(e:Event):void{			onSelectNone()			killDock()			var itemList:Array = new Array();;			var itemsArray:Array = ModelLocator.getInstance()._itemsArray;			var buildingsArray:Array = itemsArray[2];			for (var i:uint=0; i<buildingsArray.length; i++){				var currentItemVO:ItemVO = buildingsArray[i] as ItemVO;				var currentName:String = currentItemVO._itemName;				var newItemObject = new Object();				newItemObject.name = currentName;				newItemObject.price = currentItemVO._price;				///itemList.push(currentName);				itemList.push(newItemObject);			}						///itemList = new Array("DoubleHouseRight","DoubleHouseLeft",  "FourTileHouse", "Tractor", "Bulldozer", "Farmhouse", "Barn");			_buildingDock = new Dock(_container, itemList);			_buildingDock.addEventListener(Dock.SELECT_ITEM, handleSelectItem);			_container.addChild(_buildingDock);			_buildingDock.y -=10;			_currentDock = _buildingDock;		}				private function handleSelectItem(e:Event=null):void{			//deselect previous item, if any			ModelLocator.getInstance()._selectedItemVO = null;			ModelLocator.getInstance()._destroyMode = false;			if (_cursorMc != null){				_cursorMc.removeEventListener(Event.ENTER_FRAME, followMouse);				_container.removeChild(_cursorMc);				_cursorMc = null;			}			if(e != null){				if (e.target is Dock){					var dock:Dock = e.target as Dock;					var selectedItem:String = dock._selectedItem;					var classRef:Class = getDefinitionByName(selectedItem) as Class;				}			}						var currentItemVO:ItemVO = getCurrentItemVO(selectedItem);			currentItemVO._itemClass = classRef;			ModelLocator.getInstance()._selectedItemVO = currentItemVO;									_cursorMc = new classRef() as MovieClip;			_cursorMc.scaleX = 0.5;			_cursorMc.scaleY = 0.5;			//NOTE: *** broadcast this event instead of using ModelLocator			//NOTE: *** make item "click and stick" to the cursor till it's dropped			ModelLocator.getInstance()._selectedItem = _cursorMc;									if (selectedItem == "Bulldozer"){				ModelLocator.getInstance()._destroyMode = true;			}						_container.addChild(_cursorMc);			_cursorMc.addEventListener(Event.ENTER_FRAME, followMouse);					}		/** gets all the item info for the clicked item*/		private function getCurrentItemVO(selectedItem:String):ItemVO{			var itemsArray:Array = ModelLocator.getInstance()._itemsArray;			for (var i:uint=0; i<itemsArray.length; i++){				var currentArray:Array = itemsArray[i];				for (var j:uint=0; j<currentArray.length; j++){					var currentItemVO:ItemVO = currentArray[j];					var currentName:String = currentItemVO._itemName;					if (selectedItem == currentName){						return currentItemVO;					}				}			}			return null;		}		private function followMouse(e:Event):void{			var mc:MovieClip = e.target as MovieClip;			mc.mouseEnabled = false;			mc.x = _container.mouseX-10;			mc.y = _container.mouseY-5;		}		public function onSelectNone(e:Event=null):void{			ModelLocator.getInstance()._selectedItemVO = null;			ModelLocator.getInstance()._destroyMode = false;			if (_cursorMc != null){				_cursorMc.removeEventListener(Event.ENTER_FRAME, followMouse);				_container.removeChild(_cursorMc);				_cursorMc = null;			}			//killDock();		}		private function killDock():void{			if (_currentDock != null){				_currentDock.killMenu();				_currentDock.addEventListener(Dock.SELECT_ITEM, handleSelectItem);				_container.removeChild(_currentDock);				_currentDock = null;			}		}	}}